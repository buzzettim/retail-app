#!/usr/bin/env bash
set -o pipefail
set +e


THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )";
NEW_PROC_PID="";


kill_node_instances() {
  # grep is not feature complete on the share system (missing flags
  # like "-o") and we don't have pgrep, so we will use basic grep/
  # awk features to capture running node instances.
  node_instances="$(ps -ef | grep node | grep -v "grep" | awk '{print $2}')";

  if [[ -z "$node_instances" ]]; then
    printf "No running Node instances found.\n"
  else
    echo "$(ps -ef | grep node)";
    printf "Existing node processes found.\n"
    printf "Killing $(echo $node_instances | wc -w | awk '{$1=$1};1') PIDs...\n";

    # Kill all existing Node PIDs.
    for pid in $node_instances;
      do kill -15 $pid || true;
    done
  fi
}


# Start a script as a background process. Expects the first argument to
# be a Bash command to execute. The background process is started with
# the "&" character.
start_script() {
  export NODE_ENV=production;

  if [[ -z "$NODE_PORT" ]]; then
    export NODE_PORT=9520;
  fi

  node_script="node $THIS_DIR/www &";
  printf "Starting Node server in background...\n";
  
  # Start script. Capture started ID and print it to the user
  # for debugging purposes.
  echo "Executing script: $node_script"
  eval $node_script;
  NEW_PROC_PID="$!"

  printf "New server process started with ID: $NEW_PROC_ID";

  return 0;
}


main () {
  # Get all active node instances
  kill_node_instances;
  exit 0;
}



main "$@"