#!/usr/bin/env node
/**
 * @module www
 * @fileoverview Module to start a node server with some bindings built in.
 */

// DO NOT EDIT DIRECTLY!
// This module contains functions both auto-generated and hand-written. Only
// edit this module if you know and are sure of what you are doing.

/* eslint-disable no-restricted-globals */
/* eslint-disable no-console */


// Module dependencies.
const fs = require('fs');
const debug = require('debug')('server-template:server');
const http = require('http');
const path = require('path');
const app = require('../app');

// Global variables.
const DEFAULT_PORT_NUMBER = 3000;
const LOG_DIR = path.join(__dirname, 'logs')
const LOG_FILES = [
  path.join(LOG_DIR, 'stdout.log'),
  path.join(LOG_DIR, 'stderr.log'),
];

/**
 * @type {String}
 * @public @var
 * Pipe server setup values into string.
 */
let pipe;

/**
 * @type {Number}
 * @public @var
 * Get port from environment and store in Express.
 */
let port;


/**
 * @type {Object}
 * @public @var
 * Establish an Express server object.
 */
let server;


console.log('Begin server deployment Node.js script...');


/**
 * @function normalizePort
 * @description Normalize a port into a number, string, or false.
 * @param {Number} val The value of the port to use.
 * @returns {Boolean|Number} False if we cannot normalize the port, or the number
 *    if we can.
 */
const normalizePort = (val) => {
  const parsedPortVal = parseInt(val, 10);

  if (isNaN(parsedPortVal)) {
    // named pipe
    return val;
  }

  if (parsedPortVal >= 0) {
    // port number
    return parsedPortVal;
  }

  return false;
};

/**
 * @function onError
 * @description Handle an error triggered from the server.
 * @param {Error} error The error object captured from the server.
 * @throws {Error} Throws the original error if we cannot handle the type of error
 *    caught.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${pipe}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * @function onListening
 * @description Server listening event handler. Called automatically after the
 *    server starts.
 */
const onListening = () => {
  const addr = server.address;
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug('Listening on ', bind);
};


/**
 * @function setupLoggingFiles
 * @description Create directory and files required for logging.
 */
const setupLoggingFiles = () => {
  // Make the directory.
  fs.mkdir(LOG_DIR, 0o777, (err) => {
    if (err) {
      if (err.code === 'EEXIST') {
        console.error('Log directory already exists!');
      }
      else {
        console.error('Error caught while trying to make log dir: ', err.message);
      }
    }

    LOG_FILES.forEach((filePath) => {
      fs.writeFile(filePath, '', (logErr) => {
        if (logErr) {
          console.error('Error trying to create ', filePath);
          console.error('Perhaps it already exists?', err.message);
        }
      });
    });
  // End making a directory.
  });
};


/**
 * @function setupRedirectPipes
 * @description Redirect stdout, stderr and uncaught exceptions to log files.
 */
const setupRedirectPipes = () => {
  // Set up stdout, stderr redirects via WriteStream pipe.

  LOG_FILES.forEach((filePath, index) => {
    // Redirect pipe. Bind `this` to the respective write stream.

    const outputPipe = fs.createWriteStream(filePath);

    if (index === 0) {
      process.stdout.write = outputPipe.write.bind(outputPipe);
    }
    else {
      process.stderr.write = outputPipe.write.bind(outputPipe);
    }
  });

  process.on('uncaughtException', (err) => {
    console.error((err && err.stack) ? err.stack : err);
  });
};


/**
 * Set up port number for the server.
 */
port = normalizePort(process.env.NODE_PORT) || normalizePort(DEFAULT_PORT_NUMBER);
app.set('port', port);

/**
 * Create HTTP server.
 */
server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening.bind(this, server));

console.log('Server started on port ', port);

// Set up stdout, stderr redirects.
setupLoggingFiles();
setupRedirectPipes();
