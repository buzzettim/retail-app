#!/usr/bin/env groovy

pipeline {
    agent {
        node { label 'zOS_Share' } 
    }
    options {
        // Set the build pipeline to time out after 1 hour.
        // If the pipeline gets held up, it will automatically get terminated
        // after this time value.
        timeout(time: 1, unit: 'HOURS') 
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Running build ID: ${env.BUILD_ID} on URL: ${env.JENKINS_URL}"
                echo "Checking out source code from Git..."
                checkout scm
                echo "Done checking out source code."
            }
        }
        stage('Setup Environment') {
            environment {
                NODE_ENV = "test"
            }
            steps {
                echo "Begin setup..."
                echo "Node environment is: ${env.NODE_ENV}"
                sh 'node --version'
                sh 'npm prune --production'
                sh 'npm install'
                echo "End setup."
            }
        }
        stage('Testing') {
            environment {
                NODE_ENV = "test"
            }
            steps {
                echo "Begin testing..."
                sh 'npm test'
                echo "testing complete."
            }
        }
        stage('Deploy') {
            environment {
                NODE_ENV = "production"
            }
            when {
                // Only deploy if 'master' branch triggers Jenkins pipeline.
                /*
                expression {
                   env.BRANCH_NAME.toString().equals('master')
                }
                */
                branch 'master'
            }
            steps {
                sh 'npm prune --production'
                echo "\nRunning parameters:"
                echo env.PATH
                sh "pwd"
                echo "\nDirectory contents:"
                sh "ls -la"
                echo "\nRunning binary directory:"
                sh "ls -la bin"
                echo "Killing existing Node process..."
                sh "npm run killserver"
                echo "Starting server as BG process..."
                sh "npm run prod"
                echo "Running Node processes:"
                sh "ps -ef | grep 'node' | grep -v 'grep'"
                echo "Server start output log:"
                sh "cat logs/stdout.log"
                echo "Server start error log:"
                sh "cat logs/stderr.log"
            }
        }
        /*
        stage('Prune and Cleanup') {
            steps {
                echo "Skipping building stage. "
                // Clean up remaining node_modules and extra files
                // to prevent filespace pollution and running out
                // of disk space.
                sh 'rm -rf node_modules/'
            }
        }
        */
    }

    post {
        /*
            always {
                echo "Pipeline execution has finished"
            }
            success {

            }
            fixed {

            }
            cleanup {

            }
        */
            failure {
                echo "Build failed!"
            }
            unstable {
                echo "Build unstable; check tests for failures."
            }
        }
}